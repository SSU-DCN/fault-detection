---
- name: set controller facts
  set_fact:
    address:
      # EXTERNAL_IP
      INTERNAL_IP: 192.168.10.93 #ip of master node

- name: Create the Kubernetes configuration directory
  become: yes
  file:
    path: /etc/kubernetes/config
    state: directory
    # mode: 0777

- name: Pull kube binaries for controller
  get_url:
    url: "{{ item }}"
    dest: $HOME/fault-detection/docs/anisble-playbook/kubernetes-the-hard-way/
    mode: a+x
  with_items:
    - https://k8s-pod-migration.obs.eu-de.otc.t-systems.com/v1/kube-apiserver
    - https://k8s-pod-migration.obs.eu-de.otc.t-systems.com/v1/kube-controller-manager
    - https://k8s-pod-migration.obs.eu-de.otc.t-systems.com/v1/kube-scheduler
    - https://k8s-pod-migration.obs.eu-de.otc.t-systems.com/v1/kubectl

- name: Move binaries file to /usr/local/bin/
  become: yes
  command: mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/

- name: Configure the Kubernetes API Server step 1
  become: yes
  file:
    path: /var/lib/kubernetes/
    state: directory
    # mode: 0777

- name: Configure the Kubernetes API Server step 2
  become: yes
  command: mv ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem service-account-key.pem service-account.pem encryption-config.yaml /var/lib/kubernetes/

- name: Create the kube-apiserver.service systemd unit file
  become: yes
  copy:
    dest: /etc/systemd/system/kube-apiserver.service
    content: |
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-apiserver \
        --advertise-address={{address.INTERNAL_IP}} \
        --allow-privileged=true \
        --apiserver-count=3 \
        --audit-log-maxage=30 \
        --audit-log-maxbackup=3 \
        --audit-log-maxsize=100 \
        --audit-log-path=/var/log/audit.log \
        --authorization-mode=Node,RBAC \
        --bind-address=0.0.0.0 \
        --client-ca-file=/var/lib/kubernetes/ca.pem \
        --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
        --etcd-cafile=/var/lib/kubernetes/ca.pem \
        --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
        --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
        --etcd-servers=https://{{address.INTERNAL_IP}}:2379 \
        --event-ttl=1h \
        --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
        --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
        --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
        --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
        --kubelet-https=true \
        --runtime-config='api/all=true' \
        --service-account-key-file=/var/lib/kubernetes/service-account.pem \
        --service-cluster-ip-range=10.32.0.0/24 \
        --service-node-port-range=30000-32767 \
        --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
        --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Configure the Kubernetes Controller Manager
  become: yes
  command: mv kube-controller-manager.kubeconfig /var/lib/kubernetes/

- name: Create the kube-controller-manager.service systemd unit file
  become: yes
  copy:
    dest: /etc/systemd/system/kube-controller-manager.service
    content: |
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-controller-manager \
        --bind-address=0.0.0.0 \
        --cluster-cidr=10.200.0.0/16 \
        --cluster-name=kubernetes \
        --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
        --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
        --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \
        --leader-elect=true \
        --root-ca-file=/var/lib/kubernetes/ca.pem \
        --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \
        --service-cluster-ip-range=10.32.0.0/24 \
        --use-service-account-credentials=true \
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Configure the Kubernetes Scheduler
  become: yes
  command: mv kube-scheduler.kubeconfig /var/lib/kubernetes/

- name: Create the kube-scheduler.yaml configuration file
  become: yes
  copy:
    dest: /etc/kubernetes/config/kube-scheduler.yaml
    content: |
      apiVersion: kubescheduler.config.k8s.io/v1beta1
      kind: KubeSchedulerConfiguration
      clientConnection:
        kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
      leaderElection:
        leaderElect: true

- name: Create the kube-scheduler.service systemd unit file
  become: yes
  copy:
    dest: /etc/systemd/system/kube-scheduler.service
    content: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-scheduler \
        --config=/etc/kubernetes/config/kube-scheduler.yaml \
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Reload daemon
  become: yes
  systemd: daemon_reload=yes

- name: Enable service kube-apiserver, kube-controller-manager, kube-scheduler
  become: yes
  systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
  with_items:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler

- name: Start service kube-apiserver, kube-controller-manager, kube-scheduler
  become: yes
  systemd:
    state: started
    name: "{{ item }}"
  with_items:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler

- name: Restart service kube-apiserver, kube-controller-manager, kube-scheduler
  become: yes
  systemd:
    state: restarted
    daemon_reload: yes
    name: "{{ item }}"
  with_items:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler

# - name: Verification
#   command: kubectl get componentstatuses --kubeconfig admin.kubeconfig
#   register: verify

# - debug:
#     msg: 
#     - "Kubectl get componentstatuses: {{verify.stdout_lines}}"

- name: Create the system:kube-apiserver-to-kubelet ClusterRole with permissions to access the Kubelet API and perform most common tasks
  copy:
    dest: $HOME/fault-detection/docs/anisble-playbook/kubernetes-the-hard-way/rbac_kubelet_au.yaml
    content: |
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
            - "*"
- name: Create the system:kube-apiserver-to-kubelet step 2 - apply
  command: kubectl apply --kubeconfig admin.kubeconfig -f rbac_kubelet_au.yaml

- name: Bind the system:kube-apiserver-to-kubelet ClusterRole to the kubernetes user
  copy:
      dest: $HOME/fault-detection/docs/anisble-playbook/kubernetes-the-hard-way/rbac_kubelet_au_k8s_user.yaml
      content: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: system:kube-apiserver
          namespace: ""
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:kube-apiserver-to-kubelet
        subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: kubernetes

- name: Bind the system:kube-apiserver-to-kubelet step 2 - apply
  command: kubectl apply --kubeconfig admin.kubeconfig -f rbac_kubelet_au_k8s_user.yaml